12/30/24:
  2. black half of make_move
  2. movegen for non_pawn pieces

12/29/24:
  1. make_move
  2. movegen for non_pawn pieces

12/29/24:
  1. Finish in_check (just pawn attacks left to detect)
  2. make_move (we need this in movegen functions to eliminate illegal moves)
  3. movegen for non_pawn pieces

12/28/24:
  1. in_check
  2. movegen for non-pawn pieces
  3. make_move

12/28/24:
  Finish pawn_moves (all the kinds of promotions). Finish movegen functions for each other piece.
  Gonna also need a function that takes in a board and a move and returns the
  updated board after the move is made. Write in_check. 

12/27/24:
  Add comments to bitboard.rs
  Create movegen function with helpers for all pieces (pawns, knights, etc). Takes in a board state and returns all legal moves

12/26/24:
  Refactor code to generate attack maps while looking for magics. No need to deal with multiple hashmaps.

12/20/24:
    Make a HashMap<blockers, legals>. Then, make a new HashMap<legals,Vec<blockers>>. Iterate through the first hashmap and make the legal the key for the second 
    and add the blocker to that legal's value list. if the second doesnt have the legal key yet, add the (legal, Vec::new(blocker)) to the second. 
    Then, extract the keys from the second hashmap (the legals). We can then generate magics and ensure all the blockers in a vector from the second hashmap will map to 
    the same key in the final array


12/19/24: 
    Test the rook_moves function to make sure it creates the correct legal move bitboards for each blocker configuration


